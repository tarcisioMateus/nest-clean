// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions  Question[]
  answers    Answer[]
  Comment    Comment[]
  Attachment Attachment[]

  @@map("users")
}

model Question {
  id        String    @id @default(uuid())
  title     String
  slug      String    @unique
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  authorId     String  @map("author_id")
  bestAnswerId String? @unique @map("best_answer_id")

  author      User         @relation(fields: [authorId], references: [id])
  bestAnswer  Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answers     Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  authorId   String @map("author_id")
  questionId String @map("question_id")

  author       User         @relation(fields: [authorId], references: [id])
  Question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  bestAnswerOn Question?    @relation("bestAnswer")
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  authorId   String  @map("author_id")
  questionId String? @map("answer_id")
  answerId   String? @map("question_id")

  author   User      @relation(fields: [authorId], references: [id])
  Question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String    @id @default(uuid())
  title     String
  link      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  authorId   String  @map("author_id")
  questionId String? @map("answer_id")
  answerId   String? @map("question_id")

  author   User      @relation(fields: [authorId], references: [id])
  Question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@map("Attachments")
}
